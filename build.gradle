import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

}


allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
    }

    ext {
        modsBuilder = "javac"
        if (project.hasProperty("builder"))
            modsBuilder = builder
        else
            modsBuilder = System.getProperty("user.name")

        def atomMeta = new File(sourceSets.main.resources.srcDirs[0], "Manifest.properties")
        def props = new Properties()
        def df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ") // you can change it
        df.setTimeZone(TimeZone.getTimeZone("UTC"))
        try {
            atomMeta.createNewFile()
        } catch (ignored) {
        }//what a beautiful catch block
        if (atomMeta.exists()) {
            props.load(new FileInputStream(atomMeta))
            props["AtomHash"] = atomHash
            props["ArcHash"] = arcHash
            props["MindustryVersion"] = mindustryVersion
            props["VHash"] = version
            props["ModsBuilder"] = modsBuilder
            props["TimeStamp"] = df.format(new Date())
            props["TimeMilis"] = String.valueOf(System.currentTimeMillis())
            props["ManifestVersion"] = "v2"
            props.store(atomMeta.newWriter(), "Autogenerated file. Do modify.")
        }

    }

    dependencies {
        testImplementation 'junit:junit:4.12'
        implementation 'io.sentry:sentry:4.0.0-alpha.2'
        compileOnly ("com.github.o7-Fire.Atomic-Library:Atomic:$atomHash"){
            because("runtime")
        }
        compileOnly ("com.github.Anuken.Arc:arc-core:$arcHash"){
            because("provided")
        }
        compileOnly ("com.github.Anuken.Arc:backend-sdl:$arcHash"){
            because("provided")
        }
        compileOnly ("com.github.Anuken.Mindustry:core:$mindustryVersion"){
            because("provided")
        }

        compileOnly( group: 'org.jetbrains', name: 'annotations', version: '20.1.0'){
            because("compile")
        }
    }
}

task deploy(type: Jar) {
    dependsOn ":Desktop:jar"
}

jar {
    archiveFileName = "Ozone.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

task makeJar{
    dependsOn jar
}
